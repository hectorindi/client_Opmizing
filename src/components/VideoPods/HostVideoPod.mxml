<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="600" height="450" 
		 xmlns:components="components.*" xmlns:VideoPods="components.VideoPods.*">
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="publishStop", type="com.encast.WowzaCustomEvent")]
		[Event(name="streamStop", type="com.encast.WowzaCustomEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.encast.NetConnectionManager;
			import com.encast.WowzaCustomEvent;
			
			import flash.media.Video;
			
			
			private var _vid:Video;

			private var _nc:NetConnectionManager;
			private var _ns:NetStream;
			private var _so:SharedObject;
			
			private var _userID:Number = 0;
			private var _userName:String = "host";
			
			private var _playingUserName:String = "host";
			
			private var _playingVideo:Boolean = false;
			
			
			public function initializeVideoPod(nc:NetConnectionManager):void{
				_nc = nc;
				_nc.addEventListener(NetStatusEvent.NET_STATUS , onNetStatusNC);
				
				_vid = new Video(550, 414);
				
				videoPod.addChild(_vid);
				
				_so = SharedObject.getRemote("host", _nc.uri, false);
				_so.addEventListener(SyncEvent.SYNC, onSync);
				_so.client = this;
				_so.connect(_nc);
			}
			
			private function onNetStatusNC(e:NetStatusEvent):void{
				
			}
			
			private function onNetStreamStatus(e:NetStatusEvent):void{
				
				var dis:String = e.info.description;
				var user:String = "";
				
				var c:String = e.info.code; 
				
				if(c == "NetStream.Play.PublishNotify")
				{
					playHostStream();
				}
				else if(_playingVideo == true && c == "NetStream.Play.UnpublishNotify")
				{
					stopVideo();
				}
				else if(c == "NetStream.Play.StreamNotFound")
				{
					trace("Not found");
				}
			}
			
			private function onSync(e:SyncEvent):void
			{
				if(_so.data.publishingUserID != null && _so.data.publishingUserID != undefined)
				{
					if(_so.data.publishingPodID == this.id && _so.data.publishing == true)
					{
						playHostVideo();
					}
				}
				_so.removeEventListener(SyncEvent.SYNC, onSync);
				playHostStream();
			}
						
			public function muteAudio():void{
				_ns.receiveAudio(false);
			}
			
			public function unMuteAudio():void{
				_ns.receiveAudio(true);
			}
			
			private function playHostVideo():void{
				_ns = new NetStream(_nc);
				_ns.client = this;
				_ns.addEventListener(NetStatusEvent.NET_STATUS, onNetStreamStatus);
				_playingVideo = true;
				_vid.attachNetStream(_ns);
				_ns.bufferTime = 1; // for audio bug , add buffer time to rtemove shuttring
				_ns.play("host", -1, -1);
				nameLabel.visible = true;
				_vid.visible = true;
				_playingUserName = userName;
				videoPod.visible = true;
			}
			
			public function stopVideo():void{
				//trace("stopVideo called username : "+AppManager.getInstance().userName+ " id video is : "+this.id);
				videoPodAudioControl.currentState = "Unmuted";
				_playingVideo = false;
				
				_ns.close();
				_vid.attachNetStream(null);
				_vid.clear();
				_vid.visible = false;

				nameLabel.visible = false;
				_playingUserName = "";
				//trace("stopVideo for username : "+AppManager.getInstance().userName+ " and id : "+this.id+" asked to stop : host");
			}
			
			public function playHostStream():void{
				//trace("play stream : "+playUserIDStream+ " and name : "+playUserIDStream);	
				if(_playingVideo == false){
					playHostVideo();
				}
			}
			
			
			public function stopUser():void{
				//trace("Stop user called for : "+userID+" and the current user is : "+AppManager.getInstance().userName);
				if(_so.data.publishingUserID == userID){
					stopVideo();
				}
			}
			
			
			protected function videopodaudiocontrol_onMuteHandler(event:Event):void{
				//make sure there is a net stream to call it on to
				if(_playingVideo == true){
					_so.send("muteAudio");
					//set the control to the right state
					videoPodAudioControl.currentState = "Muted";
				}
			}
			
			protected function videopodaudiocontrol_onUnmuteHandler(event:Event):void{
				if(_playingVideo == true){
					_so.send("unMuteAudio");
					//set the control to the right state
					videoPodAudioControl.currentState = "Unmuted";
				}
			}
			
			public function setVideoPodAudioControl():void{
				videoPodAudioControl.visible = true;
			}
			
			public function setVideoPodStartControl(value:Boolean):void{
				this.id
			}
			
			public function get userID():int
			{
				return _userID;
			}
			
			public function get userName():String
			{
				return _userName;
			}
			
			public function get playingUserName():String
			{
				return _playingUserName;
			}
			
			public function destroy():void
			{
				_so.setProperty("publishingUserID", null);
				_so.setProperty("publishingUserName", null);
				_so.setProperty("publishing", null);
			}
			
			public function onMetaData(e:Object):void
			{
				trace("onMetaData called on host pod")
			}
			
		]]>
	</fx:Script>
	
	<s:SkinnableContainer id="videoPodPanel" width="100%" height="100%" skinClass="skins.VideoPodSkin"> <!--backgroundAlpha="0.93"
		backgroundColor="0x425159">title="{title}"-->
		<mx:UIComponent id="videoPod" x="3" y="3" width="555">
			
		</mx:UIComponent>
		<s:Label id="nameLabel" visible="false" left="3" bottom="3" color="#02001A"
				 fontFamily="Arial" fontSize="17" fontWeight="bold" text="Host"/>
		<VideoPods:VideoPodAudioControl id="videoPodAudioControl" right="3" top="3" onMuteAudio="videopodaudiocontrol_onMuteHandler(event)" onUnmuteAudio="videopodaudiocontrol_onUnmuteHandler(event)" visible="false"/>
	</s:SkinnableContainer>
</s:Group>
