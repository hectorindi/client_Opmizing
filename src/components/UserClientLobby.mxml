<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" 
		 xmlns:components="components.*" 
		 xmlns:flexpaper="com.devaldi.controls.flexpaper.*" 
		 xmlns:layouts="layouts.*"
		 xmlns:VideoPods="components.VideoPods.*">
	
	<fx:Metadata>
		[Event(name="logout", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		@font-face {
			src: url("assets/GARA.TTF");
			fontFamily: "GARAEmbd";
			embedAsCFF: true;
		}
		
		.newFont {
			fontFamily: Arial;
			fontLookup: embeddedCFF;
			fontSize: 34;
			color : #f9f8f6;
		}
	</fx:Style>
	
	<fx:Script>
		
		<![CDATA[
			import com.encast.AppManager;
			import com.encast.NetConnectionManager;
			import com.encast.UserRole;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerChildList;
			
			
			private var _nc:NetConnectionManager;
			private var _userID:Number;
			
			[Bindable]
			private var _userName:String = "";
			[Bindable]
			private var _city:String = "";
			[Bindable]
			private var _age:int = 0;
			
			private var _chatHistory:Array;
			private var _queryHistory:Array;
			private var _so:SharedObject;
			
			private var invitePanel:InvitePanel;
			
			private var lastTextChangeTime:Number;
			private var _isTypingTimer:Timer;
			
			private var _userRole:int;
			public var colour:String="";
			
			[Bindable]
			public var whoIsTypingString:String;
			
			private var _privateVidChat:PrivateChatPoPup;
			
			public function initializeLobby(nc:NetConnectionManager, chatHistory:Array,queryHistory:Array,userRole:int):void{
				_userRole = userRole;
				_nc = nc;
				_userID = AppManager.getInstance().userID;
				_userName = AppManager.getInstance().userName;
				_age = AppManager.getInstance().age;
				_city = AppManager.getInstance().city;
				_chatHistory = chatHistory;
				_queryHistory=queryHistory;
				_so = SharedObject.getRemote("chatLobby", _nc.uri, false);
				_so.addEventListener(SyncEvent.SYNC, onSync);
				_so.client = this;
				_so.connect(_nc);
				
				trace(" nc "+_nc+" userID "+_userID+" name "+ _userName);				
				
				var totalChatHistory:String = "";
				var totalQueryHistory:String = "";
				
				if(_chatHistory != null)
				{
					if(_chatHistory.length > 0){
						for(var i:int = 0; i < _chatHistory.length; i++){
							totalChatHistory += chatHistory[i] + "<br>";
						}
					}
				}
				
				if(_userRole == UserRole.PREMIUM_USER)
				{
					//changes for query history 	
					if(_queryHistory != null)
					{
						if(_queryHistory.length > 0){
							for(var k:int = 0; k < _queryHistory.length; k++){
								totalQueryHistory += _queryHistory[k] + "<br>";
							}
						}
					}
					
					if(_chatHistory != null)
					{
						if(_chatHistory.length > 0){
							for(var l:int = 0; l < _chatHistory.length; l++){
								totalChatHistory += totalChatHistory[l] + "<br>";
							}
						}
					}
					
					mainContainer.visible = true;
					mainContainer.includeInLayout = true;
					
					mainContainerViewer.visible = false;
					mainContainerViewer.includeInLayout = false;
					
					hostVid.initializeVideoPod(_nc);
					userVid.initializeVideoPod(_nc);
				}
				else if(_userRole == UserRole.VIEWER)
				{
					mainContainer.visible = false;
					mainContainer.includeInLayout = false;
					
					mainContainerViewer.visible = true;
					mainContainerViewer.includeInLayout = true;
					
					viwerVidPod.initializeVideoPod(_nc);
					viwerVidPod.visible = true;
					viwerVidPod.includeInLayout = true;
					
					nopolllbl.visible = true;
					nopolllbl.includeInLayout = true;
				}
				
				if(chatArea.htmlText == "")
				{
					chatArea.htmlText += "<font color='#FF0000'><b>Admin</b>: Welcome  " + _userName +" !"+ "</font></br>";
				}
				else
				{
					chatArea.htmlText == ""; 
				}
			}
			
			public function updateShowStatus(value:String):void
			{
				if(value.length > 0)
				{
					status.text = value;
				}
			}
			
			
			public function onInvitedUserLogoff():void{
				//chatArea.htmlText += "<font color='#FF0000'><b>Admin</b>: The user you invited has logged off</font></br>";
			}
			
			public function showBannedUsers(bannedUsersList:Object):void{
				var msg:String = "List of banned users:<br>";
				
				for(var i:Object in bannedUsersList){
					msg += "Username: " + bannedUsersList[i].bannedUserName + " - IP: " + bannedUsersList[i].bannedUserIP + " - Reason: " + bannedUsersList[i].bannedReason + "<br>";
				}
			}
			
			public function onKicked(msg:String):void{
				
			}
			
			public function onReceiveInvite(invitingUserName:String):void{
				//show the invite panel
				
				if(invitePanel == null)
				{
					invitePanel = new InvitePanel();
					invitePanel.invitingUserName = invitingUserName;
					
					invitePanel.addEventListener(invitePanel.ON_GO_TO_PRIVATE_CHAT, onGoToPrivateChat);
					invitePanel.addEventListener(invitePanel.ON_STAY_IN_LOBBY, onStayInLobby);
					
					PopUpManager.addPopUp(invitePanel, this, true,PopUpManagerChildList.POPUP);
					PopUpManager.centerPopUp(invitePanel);
				}
				
				//set the invited state in the userlist
			}
			
			private function onGoToPrivateChat(e:Event):void{
				removeInvitePanel();
				_nc.call("acceptInvite", null);
			}
			
			private function onStayInLobby(e:Event):void{
				removeInvitePanel();
				_nc.call("denyInvite", null);
			}
	
			public function onCancelInvite():void{
				removeInvitePanel();
			}
			
			private function removeInvitePanel():void{
				if(invitePanel)
				{
					invitePanel.removeEventListener(invitePanel.ON_GO_TO_PRIVATE_CHAT, onGoToPrivateChat);
					invitePanel.removeEventListener(invitePanel.ON_STAY_IN_LOBBY, onStayInLobby);
					PopUpManager.removePopUp(invitePanel);
					invitePanel = null;
				}
			}
			
			private function removePopUpPrivate(eve:Event):void
			{
				/*if(adminPanel != null)
				{
					PopUpManager.removePopUp(adminPanel);
					adminPanel = null;
				}*/
				
				if(_privateVidChat != null)
				{
					sendTheMessage("/closePrivateChat "+_privateVidChat.withUserID+' '+AppManager.getInstance().userID);
					_privateVidChat.removeEventListener(PrivateChatPoPup.ON_REMOVE_POPUP_PRIVATE, removePopUpPrivate);
					PopUpManager.removePopUp(_privateVidChat);
					//_privateVidChat.destroy();
					_privateVidChat = null;
				}
			}
			
			public function openPrivateChatPanel(_withUSerId:int = 0):void
			{				
				if(_privateVidChat == null)
				{ 
					_privateVidChat = new PrivateChatPoPup();
					_privateVidChat.addEventListener(PrivateChatPoPup.ON_REMOVE_POPUP_PRIVATE, removePopUpPrivate);
					if(_withUSerId == 0)
					{
						_privateVidChat.intializePrivateVideoChat(_nc,_userID,null);
					}
					else
					{
						_privateVidChat.intializePrivateVideoChat(_nc,_withUSerId,null);
					}
					PopUpManager.addPopUp(_privateVidChat, this, true,PopUpManagerChildList.POPUP);
					PopUpManager.centerPopUp(_privateVidChat);
				}
			}	
			
			public function closePrivateChatPanel(id:Number,id2:Number):void
			{				
				if(_privateVidChat != null)
				{
					if(id == _userID || id2 == _userID)
					{
						_privateVidChat.destroy();
						_privateVidChat.removeEventListener(PrivateChatPoPup.ON_REMOVE_POPUP_PRIVATE, removePopUpPrivate);
						PopUpManager.removePopUp(_privateVidChat);
						_privateVidChat = null;
					}
				}
			}	
			
			//need this in to handle the error that will happen, this function does nothing.
			public function sendMessage(msg:String, clr:String, uID:Number, pC:Boolean):void{
				
			}
			
			public function sendTheMessage(msg:String):void{
				var colour:String=colorPicker.selectedColor.toString(16);
				var showID:int = AppManager.getInstance().showID;
				trace("msg is : client "+msg);
				_nc.call("sendMessage", null, msg, "#" + colour, _userID.toString(), showID, false, 0);
			}
			
			protected function logoutButton_clickHandler(event:MouseEvent):void{
				var eventObj:Event = new Event("logout");
				dispatchEvent(eventObj);
			}	
			
			public function close():void{
				
			}
			
			protected function navigatorcontentInit(event:FlexEvent):void
			{
				/* var nav:NavigatorContent = event.currentTarget as NavigatorContent;
				nav.height=userlistPod.height; */
			}			
			
			private function onSync(e:SyncEvent):void{
				if(_so.data["chat"] != undefined) 
				{
					var msg:String = _so.data["chat"].chat as String;
					_so.data["chat"]
					msg = "<p>"+msg+"</p>";
					/*if(msg.search("Moderator")!= -1)
					{
						chatArea.htmlText += "<b>" + msg + "</b>";
					}
					else*/
					{
						chatArea.htmlText += msg;
					}
				}
			}			
			
			public function addChat(data:String):void
			{
				
				if(data != undefined) 
				{
					var msg:String = data as String;
					_so.data["chat"]
					msg = "<p>"+msg+"</p>";
					/*if(msg.search("Moderator")!= -1)
					{
						chatArea.htmlText += "<b>" + msg + "</b>";
					}
					else*/
					{
						var parts:Array = data.split("/");
						msg = "<b>"+parts[0]+'</b> : <font color="#'+parts[1]+'"> '+parts[2]+"</font>";
						trace(msg);
						chatArea.htmlText += msg;
					}
				}
			}
			
			public function set userRole(value:int):void
			{
				if(value >= 0 && value < 3)
				{
					AppManager.getInstance().userRole = _userRole = value;
				}
				else
				{
					AppManager.getInstance().userRole = _userRole = 0;
				}
			}
			
			public function get userRole():int
			{
				return _userRole;
			}
			
			public function onSendInvite(mailList:String):void
			{
				
			}
			
			protected function chatArea_creationCompleteHandler(event:FlexEvent):void
			{
				//chatArea.text = "";
			}
			
			protected function sendButton_clickHandler(event:MouseEvent):void
			{
				/*var msg:String = chatTextInput.text;
				if(msg != ""){
					colour=colorPicker.selectedColor.toString(16);
					sendTheMessage(msg);
					chatTextInput.text = "";
					chatTextInput.setFocus();
				}*/
				var msg:String = chatTextInput.text;
				if(msg != "")
				{
					colour=colorPicker.selectedColor.toString(16);
					//_so.setProperty("chat", msg);
					var msgComplete:String = AppManager.getInstance().userName+"/"+colour+"/"+msg+"/";
					_so.send("addChat",msgComplete);
					chatTextInput.text = "";
					chatTextInput.setFocus();
				}
				
			}
			
			protected function chatTextInput_enterHandler(event:FlexEvent):void{
				/*var msg:String = chatTextInput.text;
				if(msg != ""){
					colour=colorPicker.selectedColor.toString(16);
					chatTextInput.text = "";
					sendTheMessage(msg);
				}*/
				var msg:String = chatTextInput.text;
				if(msg != "")
				{
					colour=colorPicker.selectedColor.toString(16);
					//_so.setProperty("chat", msg);
					var msgComplete:String = AppManager.getInstance().userName+"/"+colour+"/"+msg+"/";
					_so.send("addChat",msgComplete);
					chatTextInput.text = "";
					chatTextInput.setFocus();
				}
			}
			
			protected function chatArea_updateCompleteHandler(event:FlexEvent):void{
				chatArea.verticalScrollPosition = chatArea.maxVerticalScrollPosition;
			}
			
			public function receiveMessage(msg:String, userID:Number, privateChat:Boolean, toUserID:Number):void{
				if(privateChat == false)
				{
					msg = "<p>"+msg+"</p>";
					if(msg.search("Moderator")!= -1)
					{
						chatArea.htmlText += "<b>" + msg + "</b>";
					}
					else
					{
						chatArea.htmlText += msg;
					}
				}
				else if(toUserID != 0)
				{
					
				}
			}
			
			protected function pollContainer_creationCompleteHandler(event:FlexEvent):void
			{
				//poll.init(_nc,this);
			}
			
			public function showPoll(obj:Object):void
			{
				poll.setPollAnsCients(obj);
			}
			
			public function disablePoll(obj:Object):void
			{
				poll.disablePoll();
			}
			
			public function onUpdateUser(obj:Object):void
			{
				AppManager.getInstance().userID = _userID = obj.info.userId;
				AppManager.getInstance().userName = _userName = obj.info.userName;
				AppManager.getInstance().userRole = _userRole = UserRole.PREMIUM_USER;
				
				initializeLobby(_nc, _chatHistory,_queryHistory,_userRole);
			}
			
			protected function mainContainerViewer_creationCompleteHandler(event:FlexEvent):void
			{
				poll.init(_nc,this);
				poll.userId = _userID;
			}
			
		]]>
	</fx:Script>
	
	<s:Group id="mainContainerViewer" width="100%" height="100%" creationComplete="mainContainerViewer_creationCompleteHandler(event)">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
		</s:layout>
		<VideoPods:HostVideoPod id="viwerVidPod" height="90%" width="90%" visible="false" includeInLayout="false"/>
		<s:Spacer height="25"/>
		<s:Label id="nopolllbl" visible="true" fontFamily="Arial" fontSize="21"
				 includeInLayout="false"
				 text="Show is full right now, we will add you as soon as there is some space!"/>
	</s:Group>
	<s:Group id="mainContainer" width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout horizontalAlign="center" paddingTop="10" paddingLeft="5" paddingRight="5" paddingBottom="10" verticalAlign="middle"/>
		</s:layout>
		<s:Group height="100%" width="550" id="videoHostContainer">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
			</s:layout>
			<VideoPods:HostVideoPod id="hostVid" width="550" height="450"/>
			<s:BorderContainer backgroundAlpha="0" borderStyle="solid" borderVisible="true" borderColor="#656565" width="550" height="100%" id="pollContainer" creationComplete="pollContainer_creationCompleteHandler(event)">
				<components:Poll id="poll" width="100%" height="100%"/>
			</s:BorderContainer>
		</s:Group>
		<s:BorderContainer backgroundAlpha="0" width="100%" borderStyle="solid" borderVisible="true" borderColor="#656565" height="100%" id="UserContainer">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
			</s:layout>
			<s:Group id="userBox" height="165" width="100%">
				<s:layout>
					<s:HorizontalLayout paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10"/>
				</s:layout>
				<VideoPods:VideoPod id="userVid" width="150" height="150"/>
				<s:BorderContainer id="userInfo" height="150" width="100%" borderStyle="solid" backgroundAlpha="0">
					<s:layout>
						<s:HorizontalLayout paddingTop="3" paddingBottom="3" paddingLeft="10" paddingRight="3"/>
					</s:layout>
					<s:VGroup width="100%" height="100%">
						<s:Label id="nameUser"  text="Name : " styleName="newFont" fontSize="18"/>
						<s:Label styleName="newFont" fontSize="18"
								 text="{_userName}"/>
						<s:Spacer height="5"/>
						<s:Label id="ageUser" styleName="newFont" fontSize="18" text="Age : "/>
						<s:Label id="ageLbl" styleName="newFont" fontSize="18" text="{_age}"/>
						<s:Label id="cityUser" styleName="newFont" fontSize="18" text="City : "/>
						<s:Label id="cityLbl" styleName="newFont" fontSize="18" text="{_city}"/>
					</s:VGroup>
				</s:BorderContainer>
				<!--s:BorderContainer height="150" width="20%" backgroundAlpha="0">
					<s:layout>
						<s:VerticalLayout paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3"/>
					</s:layout>
					
				</s:BorderContainer>-->
			</s:Group>
			<s:Group height="100%" width="90%" id="chatContainer">
				<s:Group height="100%" width="100%">
					<s:layout>
						<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
					</s:layout>
					<mx:TextArea id="chatArea" editable="false" width="100%" height="90%" color="0x000000" updateComplete="chatArea_updateCompleteHandler(event)"/>
					<s:Spacer height="5"/>
					<s:Group height="10%" width="100%">
						<s:layout>
							<s:HorizontalLayout paddingBottom="10" gap="5" horizontalAlign="center" verticalAlign="bottom"/>
						</s:layout>
						<s:TextInput id="chatTextInput" width="100%" enter="chatTextInput_enterHandler(event)"/> 
						<s:Button id="sendButton" label="Send" click="sendButton_clickHandler(event)"/>
						<mx:ColorPicker id="colorPicker"/>
					</s:Group>
				</s:Group>
			</s:Group>
		</s:BorderContainer>
	</s:Group>
	<s:Label id="status" left="10" top="20" color="white" fontSize="18" styleName="newFont"
			 text="OFF-AIR" visible="true"/>
</s:Group>
